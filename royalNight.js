const prompt = require("prompt");
prompt.start();
/**
 * 왕실의 나이트
 * 
 * 행복 왕국의 와실 정원은 체스판과 같은 8 * 8 좌표 평면이다. 왕실 정원의 특정한 한 칸에 나이트가 서있다.
 * 나이트는 매우 충성스러운 신하로서 매일 무술을 연마한다.
 * 
 * 나이트를 말을 타고있기 때문에 이동을 할 때는 L자 형태로만 이동할 수 있으며
 * 정원 밖으로는 나갈 수 없다.
 * 나이트는 특정한 위치에서 다음과 같은 2가지 경우로 이동할 수 있다.
 * 
 * 1. 수평으로 두 칸 이동한 뒤에 수직으로 한 칸 이동하기
 * 2. 수직으로 두 칸 이동한 뒤에 수평으로 한 칸 이동하기
 * 
 * 8 * 8 좌표 평면상에서 나이트의 위치가 주어졌을 때
 * 나이트가 이동할 수 있는 경우의 수를 출력하는 프로그램을 작성하시오.
 * 
 * 이때 왕실의 정원에서 행 위치를 표현할 때는 1부터 8로 표현하며,
 * 열 위치를 표현할때는 a부터 h로 표현한다.
 * 
 * 예를들어 나이트가 a1에 있을 때 이동할 수 있는 경우의 수는 다음 2가지이다.
 * 
 * a1의 위치는 좌표 평면에서 구석의 위치에 해당하며
 * 나이트는 정원의 밖으로는 나갈 수 없기 때문이다.
 * 
 * 1. 오른쪽으로 두 칸 이동 후 아래로 한 칸 이동하기(c2)
 * 2. 아래로 두 칸 이동 후 오른쪽으로 한 칸 이동하기(b3)
 * 
 * 나이트가 c2에 있는 경우 나이트가 이동할 수 있는 경우의 수는 6가지이다.
 * 
 * - 첫째 줄에 8 * 8 좌표 평면상에서 현재 나이트가 위치한 곳의 좌표를 
 * 나타내는 두 문자로 구성된 문자열이 입력된다.
 * - 첫째 줄에 나이트가 이동할 수 있는 경우의 수를 출력하시오
 */
prompt.get(["nightPosition"], function(err, firstRes){
    const { nightPosition } = firstRes;
    let answer = 0;
    // x의 좌표를 배열의 인덱스를 이용하여 계산하도록 세팅
    const xStr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
    const currXY = nightPosition.split("");
    // x의 포지션은 0부터 시작한다 가정하고 인덱스로 표현
    let xPosition = xStr.indexOf(currXY[0]);
    // y의 포지션은 1부터 시작
    let yPosition = Number(currXY[1]);

    /**
     * 이동 시나리오에 맞춰 경우의 수를 전부 나열
     * 
     * 0. 오른쪽 2번 아래 한번
     * 1. 오른쪽 2번 위에 한번
     * 2. 왼쪽 2번 아래 한번 
     * 3. 왼쪽 2번 위에 한번 
     * 4. 아래쪽 2번 오른쪽 한번
     * 5. 위쪽 2번 오른쪽 한번
     * 6. 아래쪽 2번 왼쪽 한번
     * 7. 위쪽 2번 왼쪽 한번
     */
    const movePosition = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];

    // 이동할 경우의 수 배열에 맞춰 순회
    movePosition.forEach(move => {

        if (
            // 0 <= x + x로 이동할 거리 <= 8 이면서
            (0 <= (xPosition + move[0]) && (xPosition + move[0]) <= 8) 
            && 
            // 1 <= y + y로 이동할 거리 <= 8 이면 경우의 수이기 때문에 answer에 +1한다
            (1 <= (yPosition + move[1]) && (yPosition + move[1]) <=8)) {
            answer++;
        }
    })

    console.log('answer??', answer)

    

});
